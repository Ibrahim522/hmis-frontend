import axios from "axios";
import { useState } from "react";

function PatientRegister() {
  const [form, setForm] = useState({
    firstName: "",
    lastName: "",
    email: "",
    address: "",
    cnic: "",
    dob: "",
    gender: "",
    contact: "",
  });

  const [errors, setErrors] = useState({});
  const [message, setMessage] = useState("");

  // OTP states
  const [otpSent, setOtpSent] = useState(false);
  const [otp, setOtp] = useState("");
  const [otpVerified, setOtpVerified] = useState(false);
  const [otpError, setOtpError] = useState("");
  const [otpSending, setOtpSending] = useState(false);
  const [otpVerifying, setOtpVerifying] = useState(false);

  // Validation regexes
  const isLettersOnly = (str) => /^[a-zA-Z\s]*$/.test(str);
  const isValidEmail = (email) =>
    /^[a-zA-Z][\w.-]*@[a-zA-Z]+\.[a-zA-Z]{2,}$/.test(email);
  const isValidContact = (contact) => /^\d*$/.test(contact);
  const isValidCnic = (cnic) => /^\d{5}-\d{7}-\d{1}$/.test(cnic);

  // Format CNIC with dashes
  const formatCnic = (value) => {
    const digits = value.replace(/\D/g, "").slice(0, 13);
    const part1 = digits.slice(0, 5);
    const part2 = digits.slice(5, 12);
    const part3 = digits.slice(12, 13);
    return [part1, part2, part3].filter(Boolean).join("-");
  };

  // Handle input change for most fields
  const handleChange = (e) => {
    const { name, value } = e.target;
    let error = "";

    switch (name) {
      case "firstName":
      case "lastName":
        if (value && !isLettersOnly(value)) error = "Only letters are allowed";
        break;
      case "email":
        if (otpSent) {
          setOtpSent(false);
          setOtpVerified(false);
          setOtp("");
          setOtpError("");
        }
        if (value && !isValidEmail(value)) error = "Invalid email format";
        break;
      default:
        error = "";
    }

    setErrors((prev) => ({ ...prev, [name]: error }));
    setForm((prev) => ({ ...prev, [name]: value }));
  };

  // CNIC input handler
  const handleCnicChange = (e) => {
    let input = e.target.value;
    const cleanInput = input.replace(/[^0-9]/g, "");
    const formatted = formatCnic(cleanInput);
    setForm((prev) => ({ ...prev, cnic: formatted }));

    if (cleanInput.length > 13) {
      setErrors((prev) => ({
        ...prev,
        cnic: "CNIC cannot be longer than 13 digits",
      }));
    } else if (!/^\d*$/.test(cleanInput)) {
      setErrors((prev) => ({
        ...prev,
        cnic: "Only digits allowed",
      }));
    } else if (cleanInput.length < 13) {
      setErrors((prev) => ({
        ...prev,
        cnic: "Complete your CNIC",
      }));
    } else {
      setErrors((prev) => ({ ...prev, cnic: "" }));
    }
  };

  // Contact input handler
  const handleContactChange = (e) => {
    const value = e.target.value;
    const error = isValidContact(value)
      ? ""
      : "Only digits allowed in contact number";
    setErrors((prev) => ({ ...prev, contact: error }));
    setForm((prev) => ({ ...prev, contact: value }));
  };

  // Send OTP to email
  const handleSendOtp = async () => {
    if (!form.email) {
      setErrors((prev) => ({ ...prev, email: "Email is required to send OTP" }));
      return;
    }
    if (!isValidEmail(form.email)) {
      setErrors((prev) => ({ ...prev, email: "Invalid email format" }));
      return;
    }

    setOtpSending(true);
    setOtpError("");
    try {
      await axios.post("http://localhost:8081/otp/send", { email: form.email });
      setOtpSent(true);
      setMessage("OTP sent to your email. Please check your inbox.");
    } catch (err) {
      setOtpError("Failed to send OTP. Try again.");
    } finally {
      setOtpSending(false);
    }
  };

  // Verify OTP
  const handleVerifyOtp = async () => {
    if (!otp) {
      setOtpError("Please enter the OTP");
      return;
    }

    setOtpVerifying(true);
    setOtpError("");
    try {
      const response = await axios.post("http://localhost:8081/otp/verify", {
        email: form.email,
        otp,
      });
      if (response.data.success) {
        setOtpVerified(true);
        setMessage("OTP verified successfully!");
        setOtpError("");
      } else {
        setOtpError(response.data.message || "Invalid OTP");
      }
    } catch (err) {
      setOtpError("OTP verification failed. Try again.");
    } finally {
      setOtpVerifying(false);
    }
  };

  // Submit registration only if OTP verified
  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!otpVerified) {
      alert("Please verify your email with OTP before registering.");
      return;
    }

    const newErrors = {};

    if (!form.firstName) newErrors.firstName = "First Name is required";
    else if (!isLettersOnly(form.firstName))
      newErrors.firstName = "Only letters are allowed";

    if (!form.lastName) newErrors.lastName = "Last Name is required";
    else if (!isLettersOnly(form.lastName))
      newErrors.lastName = "Only letters are allowed";

    if (!form.email) newErrors.email = "Email is required";
    else if (!isValidEmail(form.email)) newErrors.email = "Invalid email format";

    if (!form.address) newErrors.address = "Address is required";

    if (!form.cnic) newErrors.cnic = "CNIC is required";
    else if (!isValidCnic(form.cnic)) newErrors.cnic = "Invalid CNIC format";

    if (!form.dob) newErrors.dob = "Date of Birth is required";

    if (!form.gender) newErrors.gender = "Gender is required";

    if (!form.contact) newErrors.contact = "Contact number is required";
    else if (!isValidContact(form.contact))
      newErrors.contact = "Only digits allowed";

    setErrors(newErrors);

    if (Object.keys(newErrors).length > 0) {
      alert("Please fill all the given fields correctly.");
      return;
    }

    try {
      await axios.post("http://localhost:8081/patients/register", form);
      alert("Patient Registered successfully!");
      setForm({
        firstName: "",
        lastName: "",
        email: "",
        address: "",
        cnic: "",
        dob: "",
        gender: "",
        contact: "",
      });
      setErrors({});
      setMessage("");
      setOtp("");
      setOtpSent(false);
      setOtpVerified(false);
      setOtpError("");
    } catch (err) {
      setMessage("Registration failed: " + err.message);
    }
  };

  return (
    <div>
      <h2>Patient Registration</h2>
      <form onSubmit={handleSubmit} noValidate className="form-container">
        <div className="form-stack">
          {/* First Name, Last Name, Address */}
          {[
            { name: "firstName", placeholder: "First Name", type: "text" },
            { name: "lastName", placeholder: "Last Name", type: "text" },
            { name: "address", placeholder: "Address", type: "text" },
          ].map((field) => (
            <div className="form-group" key={field.name}>
              <input
                type={field.type}
                name={field.name}
                placeholder={field.placeholder}
                value={form[field.name]}
                onChange={handleChange}
                required
                className={errors[field.name] ? "error" : ""}
              />
              {errors[field.name] && (
                <div className="error-message">{errors[field.name]}</div>
              )}
            </div>
          ))}

          {/* Email input with Send OTP button */}
          <div className="form-group" style={{ display: "flex", alignItems: "center" }}>
            <input
              type="email"
              name="email"
              placeholder="Email"
              value={form.email}
              onChange={handleChange}
              required
              className={errors.email ? "error" : ""}
              style={{ flexGrow: 1, marginRight: "8px" }}
              disabled={otpVerified} // disable if verified
            />
            <button
              type="button"
              onClick={handleSendOtp}
              disabled={otpSending || otpVerified}
            >
              {otpSending ? "Sending..." : otpVerified ? "Verified" : "Send OTP"}
            </button>
          </div>
          {errors.email && <div className="error-message">{errors.email}</div>}

          {/* OTP input & verify button - shown only after OTP sent */}
          {otpSent && !otpVerified && (
            <div className="form-group" style={{ display: "flex", alignItems: "center", marginTop: "8px" }}>
              <input
                type="text"
                name="otp"
                placeholder="Enter OTP"
                value={otp}
                onChange={(e) => setOtp(e.target.value)}
                maxLength={6}
                style={{ flexGrow: 1, marginRight: "8px" }}
              />
              <button
                type="button"
                onClick={handleVerifyOtp}
                disabled={otpVerifying}
              >
                {otpVerifying ? "Verifying..." : "Verify OTP"}
              </button>
            </div>
          )}
          {otpError && <div className="error-message">{otpError}</div>}
          {message && <div className="message">{message}</div>}

          {/* CNIC */}
          <div className="form-group">
            <input
              type="text"
              name="cnic"
              placeholder="CNIC"
              value={form.cnic}
              onChange={handleCnicChange}
              maxLength={15}
              required
              className={errors.cnic ? "error" : ""}
            />
            {errors.cnic && <div className="error-message">{errors.cnic}</div>}
          </div>

          {/* DOB */}
          <div className="form-group">
            <input
              type="date"
              name="dob"
              value={form.dob}
              onChange={handleChange}
              required
              className={errors.dob ? "error" : ""}
            />
            {errors.dob && <div className="error-message">{errors.dob}</div>}
          </div>

          {/* Gender */}
          <div className="form-group">
            <select
              name="gender"
              value={form.gender}
              onChange={handleChange}
              required
              className={errors.gender ? "error" : ""}
            >
              <option value="">Select Gender</option>
              <option>Male</option>
              <option>Female</option>
              <option>Other</option>
            </select>
            {errors.gender && <div className="error-message">{errors.gender}</div>}
          </div>

          {/* Contact */}
          <div className="form-group">
            <input
              type="text"
              name="contact"
              placeholder="Contact Number"
              value={form.contact}
              onChange={handleContactChange}
              required
              className={errors.contact ? "error" : ""}
            />
            {errors.contact && (
              <div className="error-message">{errors.contact}</div>
            )}
          </div>
        </div>

        <div className="register-button" style={{ marginTop: "20px" }}>
          <button type="submit" disabled={!otpVerified}>
            Register
          </button>
        </div>
      </form>

      {message && <p>{message}</p>}
    </div>
  );
}

export default PatientRegister;
